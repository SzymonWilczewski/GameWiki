@page "/developers/edit"
@page "/developers/edit/{id:int}"
@attribute [Authorize(Roles = "Admin, User")]
@inject IDeveloperService DeveloperService
@inject NavigationManager NavigationManager

<h1>Edit developer</h1>

@if (developer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="@developer" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="mb-3">
                <label for="Name">Name</label>
                    <InputText id="Name" class="form-control" @bind-Value="@developer.Name" />
                <ValidationMessage For="() => developer.Name" />
                </div>

                <div class="mb-3">
                <label for="City">City</label>
                    <InputText id="City" class="form-control" @bind-Value="@developer.City" />
                <ValidationMessage For="() => developer.City" />
                </div>

                <div class="mb-3">
                <label for="Country">Country</label>
                    <InputText id="Country" class="form-control" @bind-Value="@developer.Country" />
                <ValidationMessage For="() => developer.Country" />
                </div>

                <button type="submit" class="btn btn-primary">Edit</button>
                <button type="button" class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/developers")'>Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? id { get; set; }
    private Developer? developer;

    protected override async Task OnParametersSetAsync()
    {
        if (id is not null)
        {
            Developer tmpDeveloper = await DeveloperService.GetDeveloper(id.Value);
            developer = new()
                {
                    Id = tmpDeveloper.Id,
                    Name = tmpDeveloper.Name,
                    City = tmpDeveloper.City,
                    Country = tmpDeveloper.Country
                };

        } 
        else
        {
            developer = new()
                {
                    Name = string.Empty,
                    City = string.Empty,
                    Country = string.Empty
                };
        }
    }

    private void HandleSubmit(EditContext editContext)
    {
        var newDeveloper = (Developer)editContext.Model;
        DeveloperService.UpdateDeveloper(id.Value, newDeveloper);
        NavigationManager.NavigateTo("developers");
    }
}
